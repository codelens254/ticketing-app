version: "3.5"

services:
  # Consul :- Automate network configurations, discover services, and enable secure connectivity across any cloud or runtime.
  consul:
    image: consul
    container_name: ticketing-app-consul
    ports:
      - 8500:8500
    networks:
      - ticketing-app
    volumes:
      - consul:/consul/data

  # Vault :- Secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets
  # and other sensitive data using a UI, CLI, or HTTP API.
  vault:
    image: vault
    container_name: ticketing-app-vault
    ports:
      - 8200:8200
    networks:
      - ticketing-app
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
      - VAULT_DEV_ROOT_TOKEN_ID=secret # this shd be secret
    cap_add:
      - IPC_LOCK
  
  # MongoDb as the NoSQL Persistence Option      
  mongodb:
    image: mongo:4
    container_name: ticketing-app-mongodb
    ports:
      - 27020:27017
    networks:
      - ticketing-app
    volumes:
      - mongo:/data/db
      
  # RabbitMQ for Message Queueing. Our preffered message broker utilising AMQP protocol ...
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ticketing-app-rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - ticketing-app
    volumes:
      - rabbitmq:/var/lib/rabbitmq       
      
  # Redis for Caching      
  redis:
    image: redis
    container_name: ticketing-app-redis
    ports:
      - 6379:6379
    networks:
      - ticketing-app
    volumes:
      - redis:/data      

  # Postgres as the SQL Persistence
  postgres:
    image: postgres
    container_name: ticketing-app-postgres
    ports:
     - 5439:5432
    networks:
      - ticketing-app
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=disbursements
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    restart: unless-stopped


  # MySql - We'll use this persistence for Keycloak ...
  mysql-keycloak:
    image: mysql:5.7
    container_name: ticketing-app-mysql-keycloak
    volumes:
      - mysql_data_volume_2:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - ticketing-app


  # Axon Framework :-  To help in building DDD, CQRS and Event Sourcing applications
  axon:
    image: axoniq/axonserver
    container_name: ticketing-app-axon
    ports:
      - 8024:8024
      - 8124:8124
    networks:
      - ticketing-app

  # Keycloak :- Open Source Identity and Access Management For Modern Applications and Services
  keycloak:
    image: quay.io/keycloak/keycloak:12.0.1
    container_name: ticketing-app-keycloak
    expose:
      - 8080
    ports:
      - 9080:8080
    depends_on:
      - mysql-keycloak
    networks:
      - ticketing-app
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      JDBC_PARAMS: "useSSL=false"

networks:
  ticketing-app:
    name: ticketing-app
    external: true
      
volumes:
  postgres-volume:
    driver: local
  consul:
    driver: local
  mongo:
    driver: local
  rabbitmq:
    driver: local
  redis:
    driver: local
  mysql_data_volume_2:
    driver: local
      
    